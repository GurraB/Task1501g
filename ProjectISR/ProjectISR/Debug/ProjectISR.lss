
ProjectISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  00080cd4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000094  20070558  0008122c  00010558  2**2
                  ALLOC
  3 .stack        00002004  200705ec  000812c0  00010558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010581  2**0
                  CONTENTS, READONLY
  6 .debug_info   000078f5  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000198d  00000000  00000000  00017ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000024cc  00000000  00000000  0001985e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000738  00000000  00000000  0001bd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007a8  00000000  00000000  0001c462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000175ea  00000000  00000000  0001cc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cfc4  00000000  00000000  000341f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005fb27  00000000  00000000  000411b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000eb4  00000000  00000000  000a0ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725f0 	.word	0x200725f0
   80004:	0008093d 	.word	0x0008093d
   80008:	00080939 	.word	0x00080939
   8000c:	00080939 	.word	0x00080939
   80010:	00080939 	.word	0x00080939
   80014:	00080939 	.word	0x00080939
   80018:	00080939 	.word	0x00080939
	...
   8002c:	00080939 	.word	0x00080939
   80030:	00080939 	.word	0x00080939
   80034:	00000000 	.word	0x00000000
   80038:	00080939 	.word	0x00080939
   8003c:	00080939 	.word	0x00080939
   80040:	00080939 	.word	0x00080939
   80044:	00080939 	.word	0x00080939
   80048:	00080939 	.word	0x00080939
   8004c:	00080939 	.word	0x00080939
   80050:	00080939 	.word	0x00080939
   80054:	00080939 	.word	0x00080939
   80058:	00080939 	.word	0x00080939
   8005c:	00080939 	.word	0x00080939
   80060:	00080939 	.word	0x00080939
   80064:	00080939 	.word	0x00080939
   80068:	00000000 	.word	0x00000000
   8006c:	000807e5 	.word	0x000807e5
   80070:	000807f9 	.word	0x000807f9
   80074:	0008080d 	.word	0x0008080d
   80078:	00080821 	.word	0x00080821
	...
   80084:	00080939 	.word	0x00080939
   80088:	00080939 	.word	0x00080939
   8008c:	00080939 	.word	0x00080939
   80090:	00080939 	.word	0x00080939
   80094:	00080939 	.word	0x00080939
   80098:	00080939 	.word	0x00080939
   8009c:	00080939 	.word	0x00080939
   800a0:	00080939 	.word	0x00080939
   800a4:	00000000 	.word	0x00000000
   800a8:	00080939 	.word	0x00080939
   800ac:	0008042d 	.word	0x0008042d
   800b0:	00080939 	.word	0x00080939
   800b4:	00080939 	.word	0x00080939
   800b8:	00080939 	.word	0x00080939
   800bc:	000803dd 	.word	0x000803dd
   800c0:	00080939 	.word	0x00080939
   800c4:	00080939 	.word	0x00080939
   800c8:	00080939 	.word	0x00080939
   800cc:	00080939 	.word	0x00080939
   800d0:	00080939 	.word	0x00080939
   800d4:	00080939 	.word	0x00080939
   800d8:	00080939 	.word	0x00080939
   800dc:	00080939 	.word	0x00080939
   800e0:	00080939 	.word	0x00080939
   800e4:	00080939 	.word	0x00080939
   800e8:	00080939 	.word	0x00080939
   800ec:	00080939 	.word	0x00080939
   800f0:	00080939 	.word	0x00080939

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	00080cd4 	.word	0x00080cd4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00080cd4 	.word	0x00080cd4
   8013c:	2007055c 	.word	0x2007055c
   80140:	00080cd4 	.word	0x00080cd4
   80144:	00000000 	.word	0x00000000

00080148 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   80148:	2301      	movs	r3, #1
   8014a:	6003      	str	r3, [r0, #0]
   8014c:	4770      	bx	lr

0008014e <dacc_set_transfer_mode>:
{
	if (ul_mode) {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#else
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   8014e:	6843      	ldr	r3, [r0, #4]
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   80150:	b111      	cbz	r1, 80158 <dacc_set_transfer_mode+0xa>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#else
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   80152:	f043 0310 	orr.w	r3, r3, #16
   80156:	e001      	b.n	8015c <dacc_set_transfer_mode+0xe>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   80158:	f023 0310 	bic.w	r3, r3, #16
   8015c:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr

00080162 <dacc_set_channel_selection>:
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
   80162:	2901      	cmp	r1, #1
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   80164:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   80166:	d806      	bhi.n	80176 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
   80168:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   8016c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   80170:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
   80176:	2001      	movs	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
   80178:	4770      	bx	lr

0008017a <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   8017a:	b510      	push	{r4, lr}
	uint32_t mr = p_dacc->DACC_MR
   8017c:	6844      	ldr	r4, [r0, #4]
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   8017e:	0209      	lsls	r1, r1, #8
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
   80180:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   80184:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   80188:	b289      	uxth	r1, r1
   8018a:	430c      	orrs	r4, r1
	if (ul_maxs) {
   8018c:	b112      	cbz	r2, 80194 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
   8018e:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
   80192:	e001      	b.n	80198 <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
   80194:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   80198:	061b      	lsls	r3, r3, #24
   8019a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   8019e:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
   801a0:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
   801a2:	2000      	movs	r0, #0
   801a4:	bd10      	pop	{r4, pc}

000801a6 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   801a6:	2901      	cmp	r1, #1
   801a8:	f04f 0301 	mov.w	r3, #1
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   801ac:	bf9d      	ittte	ls
   801ae:	408b      	lslls	r3, r1
   801b0:	6103      	strls	r3, [r0, #16]
	return DACC_RC_OK;
   801b2:	2000      	movls	r0, #0
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
   801b4:	4618      	movhi	r0, r3

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   801b6:	4770      	bx	lr

000801b8 <watchDogReload>:
#include "wdt.h"
#define p_WDT_CR (uint32_t*) 0x400E1A50U

/* Resets watchdog timer */
void watchDogReload() {
	*p_WDT_CR |= (1 << (0)) | (0xA5 << (24));
   801b8:	4a03      	ldr	r2, [pc, #12]	; (801c8 <watchDogReload+0x10>)
   801ba:	6813      	ldr	r3, [r2, #0]
   801bc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   801c0:	f043 0301 	orr.w	r3, r3, #1
   801c4:	6013      	str	r3, [r2, #0]
   801c6:	4770      	bx	lr
   801c8:	400e1a50 	.word	0x400e1a50

000801cc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   801cc:	b510      	push	{r4, lr}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   801ce:	0189      	lsls	r1, r1, #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801d0:	2402      	movs	r4, #2

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   801d2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801d4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   801d6:	f04f 31ff 	mov.w	r1, #4294967295
   801da:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   801dc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   801de:	605a      	str	r2, [r3, #4]
   801e0:	bd10      	pop	{r4, pc}

000801e2 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   801e2:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   801e6:	4770      	bx	lr

000801e8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   801e8:	0189      	lsls	r1, r1, #6
   801ea:	2305      	movs	r3, #5
   801ec:	5043      	str	r3, [r0, r1]
   801ee:	4770      	bx	lr

000801f0 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   801f0:	0189      	lsls	r1, r1, #6
   801f2:	2302      	movs	r3, #2
   801f4:	5043      	str	r3, [r0, r1]
   801f6:	4770      	bx	lr

000801f8 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   801f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   801fc:	6908      	ldr	r0, [r1, #16]
}
   801fe:	4770      	bx	lr

00080200 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80200:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80204:	61ca      	str	r2, [r1, #28]
   80206:	4770      	bx	lr

00080208 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80208:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8020c:	624a      	str	r2, [r1, #36]	; 0x24
   8020e:	4770      	bx	lr

00080210 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   80210:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   80212:	2402      	movs	r4, #2
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   80214:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   80216:	9401      	str	r4, [sp, #4]
   80218:	2408      	movs	r4, #8
   8021a:	9402      	str	r4, [sp, #8]
   8021c:	2420      	movs	r4, #32
   8021e:	9403      	str	r4, [sp, #12]
   80220:	2480      	movs	r4, #128	; 0x80
   80222:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   80224:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   80226:	0be4      	lsrs	r4, r4, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   80228:	9405      	str	r4, [sp, #20]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   8022a:	2400      	movs	r4, #0
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   8022c:	ad01      	add	r5, sp, #4
   8022e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   80232:	fbb1 f6f5 	udiv	r6, r1, r5
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
   80236:	42b0      	cmp	r0, r6
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   80238:	ea4f 4716 	mov.w	r7, r6, lsr #16
		if (ul_freq > ul_high) {
   8023c:	d804      	bhi.n	80248 <tc_find_mck_divisor+0x38>
			return 0;
		} else if (ul_freq >= ul_low) {
   8023e:	42b8      	cmp	r0, r7
   80240:	d204      	bcs.n	8024c <tc_find_mck_divisor+0x3c>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   80242:	3401      	adds	r4, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   80244:	2c05      	cmp	r4, #5
   80246:	d1f1      	bne.n	8022c <tc_find_mck_divisor+0x1c>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   80248:	2000      	movs	r0, #0
   8024a:	e004      	b.n	80256 <tc_find_mck_divisor+0x46>
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   8024c:	b102      	cbz	r2, 80250 <tc_find_mck_divisor+0x40>
		*p_uldiv = divisors[ul_index];
   8024e:	6015      	str	r5, [r2, #0]
	}

	if (p_ultcclks) {
   80250:	b103      	cbz	r3, 80254 <tc_find_mck_divisor+0x44>
		*p_ultcclks = ul_index;
   80252:	601c      	str	r4, [r3, #0]
	}

	return 1;
   80254:	2001      	movs	r0, #1
}
   80256:	b007      	add	sp, #28
   80258:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0008025c <trng_enable>:
 * \param p_trng  Pointer to a TRNG instance.
 *
 */
void trng_enable(Trng *p_trng)
{
	p_trng->TRNG_CR = TRNG_CR_ENABLE | TRNG_CR_KEY_PASSWD;
   8025c:	4b01      	ldr	r3, [pc, #4]	; (80264 <trng_enable+0x8>)
   8025e:	6003      	str	r3, [r0, #0]
   80260:	4770      	bx	lr
   80262:	bf00      	nop
   80264:	524e4701 	.word	0x524e4701

00080268 <configure_da>:
#include "asf.h"
#include "da.h"


/* Configure DACC (Channel 0) */
int configure_da() {
   80268:	b570      	push	{r4, r5, r6, lr}
	int allOK = 1;
	pmc_enable_periph_clk(ID_DACC);			/* DACC clock should be enabled before using it. */
	dacc_reset(DACC);						/* Reset DACC */
   8026a:	4c10      	ldr	r4, [pc, #64]	; (802ac <configure_da+0x44>)


/* Configure DACC (Channel 0) */
int configure_da() {
	int allOK = 1;
	pmc_enable_periph_clk(ID_DACC);			/* DACC clock should be enabled before using it. */
   8026c:	4d10      	ldr	r5, [pc, #64]	; (802b0 <configure_da+0x48>)
   8026e:	2026      	movs	r0, #38	; 0x26
   80270:	47a8      	blx	r5
	dacc_reset(DACC);						/* Reset DACC */
   80272:	4620      	mov	r0, r4
   80274:	4b0f      	ldr	r3, [pc, #60]	; (802b4 <configure_da+0x4c>)
   80276:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);		/* Configure FIFO transfer mode */
   80278:	4620      	mov	r0, r4
   8027a:	2100      	movs	r1, #0
   8027c:	4b0e      	ldr	r3, [pc, #56]	; (802b8 <configure_da+0x50>)
   8027e:	4798      	blx	r3
	dacc_set_timing(DACC,1,1,0);			/* 1 is shortest refresh period, 1 max. speed, 0 startup time */
   80280:	2101      	movs	r1, #1
   80282:	460a      	mov	r2, r1
   80284:	4620      	mov	r0, r4
   80286:	2300      	movs	r3, #0
   80288:	4e0c      	ldr	r6, [pc, #48]	; (802bc <configure_da+0x54>)
   8028a:	47b0      	blx	r6
	dacc_set_channel_selection(DACC,0);		/* Disable flexible (TAG) mode and select channel 0 for DAC output */	
   8028c:	4620      	mov	r0, r4
   8028e:	2100      	movs	r1, #0
   80290:	4b0b      	ldr	r3, [pc, #44]	; (802c0 <configure_da+0x58>)
   80292:	4798      	blx	r3
	allOK = dacc_enable_channel(DACC, 0);	/* Enable DAC channel 0 */
   80294:	2100      	movs	r1, #0
   80296:	4b0b      	ldr	r3, [pc, #44]	; (802c4 <configure_da+0x5c>)
   80298:	4620      	mov	r0, r4
   8029a:	4798      	blx	r3
   8029c:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_TRNG);			/* Enable clock for True Random Number Generator */
   8029e:	2029      	movs	r0, #41	; 0x29
   802a0:	47a8      	blx	r5
	trng_enable(TRNG);						/* Enable the True Random Number Generator */
   802a2:	4809      	ldr	r0, [pc, #36]	; (802c8 <configure_da+0x60>)
   802a4:	4b09      	ldr	r3, [pc, #36]	; (802cc <configure_da+0x64>)
   802a6:	4798      	blx	r3
	
	return allOK;
   802a8:	4620      	mov	r0, r4
   802aa:	bd70      	pop	{r4, r5, r6, pc}
   802ac:	400c8000 	.word	0x400c8000
   802b0:	000808f5 	.word	0x000808f5
   802b4:	00080149 	.word	0x00080149
   802b8:	0008014f 	.word	0x0008014f
   802bc:	0008017b 	.word	0x0008017b
   802c0:	00080163 	.word	0x00080163
   802c4:	000801a7 	.word	0x000801a7
   802c8:	400bc000 	.word	0x400bc000
   802cc:	0008025d 	.word	0x0008025d

000802d0 <configure_tc4>:
static uint32_t *p_TC_SR4 = (uint32_t*) TC_SR4;		   // Pointer to status register for TC1, channel 1


/* Configure TC1, channel 1 */
void configure_tc4(uint32_t frequency)
{
   802d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();								/* Configure power management of timer clocks */
	
	pmc_enable_periph_clk(ID_TC4);											/* Configure TC for a 44,1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(frequency, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   802d2:	4d18      	ldr	r5, [pc, #96]	; (80334 <configure_tc4+0x64>)
static uint32_t *p_TC_SR4 = (uint32_t*) TC_SR4;		   // Pointer to status register for TC1, channel 1


/* Configure TC1, channel 1 */
void configure_tc4(uint32_t frequency)
{
   802d4:	4606      	mov	r6, r0
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();								/* Configure power management of timer clocks */
	
	pmc_enable_periph_clk(ID_TC4);											/* Configure TC for a 44,1kHz frequency and trigger on RC compare. */
   802d6:	4b18      	ldr	r3, [pc, #96]	; (80338 <configure_tc4+0x68>)
   802d8:	201f      	movs	r0, #31
   802da:	4798      	blx	r3
	tc_find_mck_divisor(frequency, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   802dc:	4c17      	ldr	r4, [pc, #92]	; (8033c <configure_tc4+0x6c>)
   802de:	4629      	mov	r1, r5
   802e0:	aa02      	add	r2, sp, #8
   802e2:	ab03      	add	r3, sp, #12
   802e4:	9500      	str	r5, [sp, #0]
   802e6:	4630      	mov	r0, r6
   802e8:	47a0      	blx	r4
	tc_init(TC1, 1, ul_tcclks | TC_CMR_CPCTRG);
   802ea:	4c15      	ldr	r4, [pc, #84]	; (80340 <configure_tc4+0x70>)
   802ec:	9a03      	ldr	r2, [sp, #12]
   802ee:	4620      	mov	r0, r4
   802f0:	2101      	movs	r1, #1
   802f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   802f6:	4b13      	ldr	r3, [pc, #76]	; (80344 <configure_tc4+0x74>)
   802f8:	4798      	blx	r3
	
	tc_write_rc(TC1, 1, (ul_sysclk / ul_div) / frequency);						/* Configure and enable interrupt on RC compare */
   802fa:	9a02      	ldr	r2, [sp, #8]
   802fc:	4620      	mov	r0, r4
   802fe:	fbb5 f2f2 	udiv	r2, r5, r2
   80302:	fbb2 f2f6 	udiv	r2, r2, r6
   80306:	2101      	movs	r1, #1
   80308:	4b0f      	ldr	r3, [pc, #60]	; (80348 <configure_tc4+0x78>)
   8030a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8030c:	4b0f      	ldr	r3, [pc, #60]	; (8034c <configure_tc4+0x7c>)
   8030e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   80312:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) TC4_IRQn);		// Enable external interrupt
	tc_enable_interrupt(TC1, 1, TC_IER_CPCS);	// Enable interrupt for TC1, channel 1 on compare.
   80314:	4620      	mov	r0, r4
   80316:	2210      	movs	r2, #16
   80318:	2101      	movs	r1, #1
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <configure_tc4+0x80>)
   8031c:	4798      	blx	r3
	tc_start(TC1, 1); //Starts TC1, channel 1
   8031e:	4620      	mov	r0, r4
   80320:	2101      	movs	r1, #1
   80322:	4b0c      	ldr	r3, [pc, #48]	; (80354 <configure_tc4+0x84>)
   80324:	4798      	blx	r3
	Nibble.nibb = 0; //Initialize nibble to 0
   80326:	4b0c      	ldr	r3, [pc, #48]	; (80358 <configure_tc4+0x88>)
   80328:	781a      	ldrb	r2, [r3, #0]
   8032a:	f36f 0203 	bfc	r2, #0, #4
   8032e:	701a      	strb	r2, [r3, #0]
}
   80330:	b004      	add	sp, #16
   80332:	bd70      	pop	{r4, r5, r6, pc}
   80334:	0501bd00 	.word	0x0501bd00
   80338:	000808f5 	.word	0x000808f5
   8033c:	00080211 	.word	0x00080211
   80340:	40084000 	.word	0x40084000
   80344:	000801cd 	.word	0x000801cd
   80348:	00080201 	.word	0x00080201
   8034c:	e000e100 	.word	0xe000e100
   80350:	00080209 	.word	0x00080209
   80354:	000801e9 	.word	0x000801e9
   80358:	200705e8 	.word	0x200705e8

0008035c <configure_tc0>:

/* Configure TC0, Channel 0 */
void configure_tc0(uint32_t frequency)
{
   8035c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();								/* Configure power management of timer clocks */
	
	pmc_enable_periph_clk(ID_TC0);											/* Configure TC for a 44,1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(frequency, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   8035e:	4d16      	ldr	r5, [pc, #88]	; (803b8 <configure_tc0+0x5c>)
	Nibble.nibb = 0; //Initialize nibble to 0
}

/* Configure TC0, Channel 0 */
void configure_tc0(uint32_t frequency)
{
   80360:	4606      	mov	r6, r0
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();								/* Configure power management of timer clocks */
	
	pmc_enable_periph_clk(ID_TC0);											/* Configure TC for a 44,1kHz frequency and trigger on RC compare. */
   80362:	4b16      	ldr	r3, [pc, #88]	; (803bc <configure_tc0+0x60>)
   80364:	201b      	movs	r0, #27
   80366:	4798      	blx	r3
	tc_find_mck_divisor(frequency, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   80368:	4c15      	ldr	r4, [pc, #84]	; (803c0 <configure_tc0+0x64>)
   8036a:	4629      	mov	r1, r5
   8036c:	aa02      	add	r2, sp, #8
   8036e:	ab03      	add	r3, sp, #12
   80370:	9500      	str	r5, [sp, #0]
   80372:	4630      	mov	r0, r6
   80374:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
   80376:	4c13      	ldr	r4, [pc, #76]	; (803c4 <configure_tc0+0x68>)
   80378:	9a03      	ldr	r2, [sp, #12]
   8037a:	4620      	mov	r0, r4
   8037c:	2100      	movs	r1, #0
   8037e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80382:	4b11      	ldr	r3, [pc, #68]	; (803c8 <configure_tc0+0x6c>)
   80384:	4798      	blx	r3
	
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / frequency);						/* Configure and enable interrupt on RC compare */
   80386:	9a02      	ldr	r2, [sp, #8]
   80388:	4620      	mov	r0, r4
   8038a:	fbb5 f2f2 	udiv	r2, r5, r2
   8038e:	fbb2 f2f6 	udiv	r2, r2, r6
   80392:	2100      	movs	r1, #0
   80394:	4b0d      	ldr	r3, [pc, #52]	; (803cc <configure_tc0+0x70>)
   80396:	4798      	blx	r3
   80398:	4b0d      	ldr	r3, [pc, #52]	; (803d0 <configure_tc0+0x74>)
   8039a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8039e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) TC0_IRQn);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   803a0:	4620      	mov	r0, r4
   803a2:	2210      	movs	r2, #16
   803a4:	2100      	movs	r1, #0
   803a6:	4b0b      	ldr	r3, [pc, #44]	; (803d4 <configure_tc0+0x78>)
   803a8:	4798      	blx	r3
	tc_start(TC0, 0);
   803aa:	4620      	mov	r0, r4
   803ac:	2100      	movs	r1, #0
   803ae:	4b0a      	ldr	r3, [pc, #40]	; (803d8 <configure_tc0+0x7c>)
   803b0:	4798      	blx	r3
}
   803b2:	b004      	add	sp, #16
   803b4:	bd70      	pop	{r4, r5, r6, pc}
   803b6:	bf00      	nop
   803b8:	0501bd00 	.word	0x0501bd00
   803bc:	000808f5 	.word	0x000808f5
   803c0:	00080211 	.word	0x00080211
   803c4:	40080000 	.word	0x40080000
   803c8:	000801cd 	.word	0x000801cd
   803cc:	00080201 	.word	0x00080201
   803d0:	e000e100 	.word	0xe000e100
   803d4:	00080209 	.word	0x00080209
   803d8:	000801e9 	.word	0x000801e9

000803dc <TC4_Handler>:

/* ISR for TC1, Channel 1 */
void TC4_Handler() {
	*p_value = sine[Nibble.nibb++] + ((TRNG->TRNG_ODATA % 297) - 148); // Store sine + calulcated noise in *p_value
   803dc:	4a0e      	ldr	r2, [pc, #56]	; (80418 <TC4_Handler+0x3c>)
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
	tc_start(TC0, 0);
}

/* ISR for TC1, Channel 1 */
void TC4_Handler() {
   803de:	b082      	sub	sp, #8
	*p_value = sine[Nibble.nibb++] + ((TRNG->TRNG_ODATA % 297) - 148); // Store sine + calulcated noise in *p_value
   803e0:	7811      	ldrb	r1, [r2, #0]
   803e2:	f001 030f 	and.w	r3, r1, #15
   803e6:	1c58      	adds	r0, r3, #1
   803e8:	f360 0103 	bfi	r1, r0, #0, #4
   803ec:	7011      	strb	r1, [r2, #0]
   803ee:	4a0b      	ldr	r2, [pc, #44]	; (8041c <TC4_Handler+0x40>)
   803f0:	6d11      	ldr	r1, [r2, #80]	; 0x50
   803f2:	f240 1229 	movw	r2, #297	; 0x129
   803f6:	fbb1 f0f2 	udiv	r0, r1, r2
   803fa:	fb02 1210 	mls	r2, r2, r0, r1
   803fe:	4908      	ldr	r1, [pc, #32]	; (80420 <TC4_Handler+0x44>)
   80400:	3a94      	subs	r2, #148	; 0x94
   80402:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   80406:	441a      	add	r2, r3
   80408:	4b06      	ldr	r3, [pc, #24]	; (80424 <TC4_Handler+0x48>)
   8040a:	601a      	str	r2, [r3, #0]
	volatile uint32_t dummy = *p_TC_SR4; // Read interrupt flag in status register
   8040c:	4b06      	ldr	r3, [pc, #24]	; (80428 <TC4_Handler+0x4c>)
   8040e:	681b      	ldr	r3, [r3, #0]
   80410:	9301      	str	r3, [sp, #4]
	UNUSED(dummy);
   80412:	9b01      	ldr	r3, [sp, #4]
}
   80414:	b002      	add	sp, #8
   80416:	4770      	bx	lr
   80418:	200705e8 	.word	0x200705e8
   8041c:	400bc000 	.word	0x400bc000
   80420:	200700ec 	.word	0x200700ec
   80424:	200705e4 	.word	0x200705e4
   80428:	40084060 	.word	0x40084060

0008042c <TC0_Handler>:

/* ISR for TC0, Channel 0 */
void TC0_Handler() {
	*p_PIOB_SODR = (0b00000100000000000000000000000000); //Set pin 22 high
   8042c:	4a06      	ldr	r2, [pc, #24]	; (80448 <TC0_Handler+0x1c>)
   8042e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   80432:	6013      	str	r3, [r2, #0]
	DACC->DACC_CDR = *p_value; // Write to DAC
   80434:	4a05      	ldr	r2, [pc, #20]	; (8044c <TC0_Handler+0x20>)
   80436:	6811      	ldr	r1, [r2, #0]
   80438:	4a05      	ldr	r2, [pc, #20]	; (80450 <TC0_Handler+0x24>)
   8043a:	6211      	str	r1, [r2, #32]
	(void)(TC0->TC_CHANNEL)->TC_SR; // Read interrupt flag in status register
   8043c:	f5a2 2290 	sub.w	r2, r2, #294912	; 0x48000
   80440:	6a12      	ldr	r2, [r2, #32]
	*p_PIOB_CODR = (0b00000100000000000000000000000000); // Set pin 22 low
   80442:	4a04      	ldr	r2, [pc, #16]	; (80454 <TC0_Handler+0x28>)
   80444:	6013      	str	r3, [r2, #0]
   80446:	4770      	bx	lr
   80448:	400e1030 	.word	0x400e1030
   8044c:	200705e4 	.word	0x200705e4
   80450:	400c8000 	.word	0x400c8000
   80454:	400e1034 	.word	0x400e1034

00080458 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   80458:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC8);
	tc_init(TC2,2,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   8045a:	4c09      	ldr	r4, [pc, #36]	; (80480 <delayInit+0x28>)
#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
	pmc_enable_periph_clk(ID_TC8);
   8045c:	4b09      	ldr	r3, [pc, #36]	; (80484 <delayInit+0x2c>)
   8045e:	2023      	movs	r0, #35	; 0x23
   80460:	4798      	blx	r3
	tc_init(TC2,2,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   80462:	4620      	mov	r0, r4
   80464:	2200      	movs	r2, #0
   80466:	2102      	movs	r1, #2
   80468:	4b07      	ldr	r3, [pc, #28]	; (80488 <delayInit+0x30>)
   8046a:	4798      	blx	r3
	tc_set_block_mode(TC2,0);
   8046c:	4620      	mov	r0, r4
   8046e:	2100      	movs	r1, #0
   80470:	4b06      	ldr	r3, [pc, #24]	; (8048c <delayInit+0x34>)
   80472:	4798      	blx	r3
	tc_stop(TC2,2);			/* making sure the timer does not run  */
   80474:	4620      	mov	r0, r4
   80476:	2102      	movs	r1, #2
   80478:	4b05      	ldr	r3, [pc, #20]	; (80490 <delayInit+0x38>)
   8047a:	4798      	blx	r3
   8047c:	bd10      	pop	{r4, pc}
   8047e:	bf00      	nop
   80480:	40088000 	.word	0x40088000
   80484:	000808f5 	.word	0x000808f5
   80488:	000801cd 	.word	0x000801cd
   8048c:	000801e3 	.word	0x000801e3
   80490:	000801f1 	.word	0x000801f1

00080494 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80494:	b510      	push	{r4, lr}
	tc_start(TC2,2);
   80496:	4b09      	ldr	r3, [pc, #36]	; (804bc <delayMicroseconds+0x28>)
	tc_stop(TC2,2);			/* making sure the timer does not run  */
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80498:	4604      	mov	r4, r0
	tc_start(TC2,2);
   8049a:	2102      	movs	r1, #2
   8049c:	4808      	ldr	r0, [pc, #32]	; (804c0 <delayMicroseconds+0x2c>)
   8049e:	4798      	blx	r3
	while (tc_read_cv(TC2,2) < us*42); /* Only works in newere version of ASF */
   804a0:	232a      	movs	r3, #42	; 0x2a
   804a2:	435c      	muls	r4, r3
   804a4:	4806      	ldr	r0, [pc, #24]	; (804c0 <delayMicroseconds+0x2c>)
   804a6:	2102      	movs	r1, #2
   804a8:	4b06      	ldr	r3, [pc, #24]	; (804c4 <delayMicroseconds+0x30>)
   804aa:	4798      	blx	r3
   804ac:	42a0      	cmp	r0, r4
   804ae:	d3f9      	bcc.n	804a4 <delayMicroseconds+0x10>
	tc_stop(TC2,2);
   804b0:	4803      	ldr	r0, [pc, #12]	; (804c0 <delayMicroseconds+0x2c>)
   804b2:	2102      	movs	r1, #2
   804b4:	4b04      	ldr	r3, [pc, #16]	; (804c8 <delayMicroseconds+0x34>)
   804b6:	4798      	blx	r3
   804b8:	bd10      	pop	{r4, pc}
   804ba:	bf00      	nop
   804bc:	000801e9 	.word	0x000801e9
   804c0:	40088000 	.word	0x40088000
   804c4:	000801f9 	.word	0x000801f9
   804c8:	000801f1 	.word	0x000801f1

000804cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   804cc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   804ce:	480e      	ldr	r0, [pc, #56]	; (80508 <sysclk_init+0x3c>)
   804d0:	4c0e      	ldr	r4, [pc, #56]	; (8050c <sysclk_init+0x40>)
   804d2:	47a0      	blx	r4
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   804d4:	2000      	movs	r0, #0
   804d6:	213e      	movs	r1, #62	; 0x3e
   804d8:	4b0d      	ldr	r3, [pc, #52]	; (80510 <sysclk_init+0x44>)
   804da:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   804dc:	4b0d      	ldr	r3, [pc, #52]	; (80514 <sysclk_init+0x48>)
   804de:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   804e0:	2800      	cmp	r0, #0
   804e2:	d0fb      	beq.n	804dc <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   804e4:	4b0c      	ldr	r3, [pc, #48]	; (80518 <sysclk_init+0x4c>)
   804e6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   804e8:	4a0c      	ldr	r2, [pc, #48]	; (8051c <sysclk_init+0x50>)
   804ea:	4b0d      	ldr	r3, [pc, #52]	; (80520 <sysclk_init+0x54>)
   804ec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   804ee:	4b0d      	ldr	r3, [pc, #52]	; (80524 <sysclk_init+0x58>)
   804f0:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   804f2:	2800      	cmp	r0, #0
   804f4:	d0fb      	beq.n	804ee <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804f6:	4b0c      	ldr	r3, [pc, #48]	; (80528 <sysclk_init+0x5c>)
   804f8:	2010      	movs	r0, #16
   804fa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   804fc:	4b0b      	ldr	r3, [pc, #44]	; (8052c <sysclk_init+0x60>)
   804fe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80500:	4801      	ldr	r0, [pc, #4]	; (80508 <sysclk_init+0x3c>)
   80502:	47a0      	blx	r4
   80504:	bd10      	pop	{r4, pc}
   80506:	bf00      	nop
   80508:	0501bd00 	.word	0x0501bd00
   8050c:	20070089 	.word	0x20070089
   80510:	00080879 	.word	0x00080879
   80514:	000808c5 	.word	0x000808c5
   80518:	000808d5 	.word	0x000808d5
   8051c:	200d3f01 	.word	0x200d3f01
   80520:	400e0600 	.word	0x400e0600
   80524:	000808e5 	.word	0x000808e5
   80528:	00080835 	.word	0x00080835
   8052c:	000809bd 	.word	0x000809bd

00080530 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80530:	4b18      	ldr	r3, [pc, #96]	; (80594 <board_init+0x64>)
   80532:	f44f 4200 	mov.w	r2, #32768	; 0x8000
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80536:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80538:	200b      	movs	r0, #11
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8053a:	605a      	str	r2, [r3, #4]
   8053c:	4c16      	ldr	r4, [pc, #88]	; (80598 <board_init+0x68>)
   8053e:	47a0      	blx	r4
   80540:	200c      	movs	r0, #12
   80542:	47a0      	blx	r4
   80544:	200d      	movs	r0, #13
   80546:	47a0      	blx	r4
   80548:	200e      	movs	r0, #14
   8054a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8054c:	4c13      	ldr	r4, [pc, #76]	; (8059c <board_init+0x6c>)
   8054e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80552:	203b      	movs	r0, #59	; 0x3b
   80554:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80556:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8055a:	2055      	movs	r0, #85	; 0x55
   8055c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8055e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80562:	2056      	movs	r0, #86	; 0x56
   80564:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80566:	490e      	ldr	r1, [pc, #56]	; (805a0 <board_init+0x70>)
   80568:	2068      	movs	r0, #104	; 0x68
   8056a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8056c:	490d      	ldr	r1, [pc, #52]	; (805a4 <board_init+0x74>)
   8056e:	205c      	movs	r0, #92	; 0x5c
   80570:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80576:	4b0c      	ldr	r3, [pc, #48]	; (805a8 <board_init+0x78>)
   80578:	f44f 7140 	mov.w	r1, #768	; 0x300
   8057c:	480b      	ldr	r0, [pc, #44]	; (805ac <board_init+0x7c>)
   8057e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80580:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80584:	202b      	movs	r0, #43	; 0x2b
   80586:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80588:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8058c:	202a      	movs	r0, #42	; 0x2a
   8058e:	47a0      	blx	r4
   80590:	bd10      	pop	{r4, pc}
   80592:	bf00      	nop
   80594:	400e1a50 	.word	0x400e1a50
   80598:	000808f5 	.word	0x000808f5
   8059c:	00080645 	.word	0x00080645
   805a0:	28000079 	.word	0x28000079
   805a4:	28000001 	.word	0x28000001
   805a8:	00080709 	.word	0x00080709
   805ac:	400e0e00 	.word	0x400e0e00

000805b0 <pio_set_peripheral>:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   805b0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   805b4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   805b6:	d014      	beq.n	805e2 <pio_set_peripheral+0x32>
   805b8:	d809      	bhi.n	805ce <pio_set_peripheral+0x1e>
   805ba:	b1b1      	cbz	r1, 805ea <pio_set_peripheral+0x3a>
   805bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   805c0:	d112      	bne.n	805e8 <pio_set_peripheral+0x38>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   805c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   805c4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   805c6:	400b      	ands	r3, r1
   805c8:	ea23 0302 	bic.w	r3, r3, r2
   805cc:	e00b      	b.n	805e6 <pio_set_peripheral+0x36>
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   805ce:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   805d2:	d00a      	beq.n	805ea <pio_set_peripheral+0x3a>
   805d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   805d8:	d007      	beq.n	805ea <pio_set_peripheral+0x3a>
   805da:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   805de:	d103      	bne.n	805e8 <pio_set_peripheral+0x38>
   805e0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
		break;

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   805e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   805e4:	4313      	orrs	r3, r2
   805e6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   805e8:	6042      	str	r2, [r0, #4]
   805ea:	4770      	bx	lr

000805ec <pio_set_input>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805ec:	07d3      	lsls	r3, r2, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805ee:	6441      	str	r1, [r0, #68]	; 0x44
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
   805f0:	bf4c      	ite	mi
   805f2:	6641      	strmi	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805f4:	6601      	strpl	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805f6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   805fa:	bf14      	ite	ne
   805fc:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   805fe:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80600:	0793      	lsls	r3, r2, #30
   80602:	d502      	bpl.n	8060a <pio_set_input+0x1e>
		p_pio->PIO_SCIFSR = ul_mask;
   80604:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80608:	e003      	b.n	80612 <pio_set_input+0x26>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8060a:	0713      	lsls	r3, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   8060c:	bf48      	it	mi
   8060e:	f8c0 1084 	strmi.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80612:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80614:	6001      	str	r1, [r0, #0]
   80616:	4770      	bx	lr

00080618 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80618:	b510      	push	{r4, lr}
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8061a:	9c02      	ldr	r4, [sp, #8]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8061c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8061e:	b10c      	cbz	r4, 80624 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80620:	6641      	str	r1, [r0, #100]	; 0x64
   80622:	e000      	b.n	80626 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80624:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80626:	b10b      	cbz	r3, 8062c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80628:	6501      	str	r1, [r0, #80]	; 0x50
   8062a:	e000      	b.n	8062e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8062c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8062e:	b10a      	cbz	r2, 80634 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80630:	6301      	str	r1, [r0, #48]	; 0x30
   80632:	e000      	b.n	80636 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80634:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80636:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80638:	6001      	str	r1, [r0, #0]
   8063a:	bd10      	pop	{r4, pc}

0008063c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8063c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8063e:	4770      	bx	lr

00080640 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80640:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80642:	4770      	bx	lr

00080644 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80646:	0944      	lsrs	r4, r0, #5
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80648:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8064a:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8064e:	f001 41f0 	and.w	r1, r1, #2013265920	; 0x78000000
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80652:	f204 7407 	addw	r4, r4, #1799	; 0x707
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80656:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8065a:	ea4f 2444 	mov.w	r4, r4, lsl #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8065e:	d02b      	beq.n	806b8 <pio_configure_pin+0x74>
   80660:	d814      	bhi.n	8068c <pio_configure_pin+0x48>
   80662:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80666:	d018      	beq.n	8069a <pio_configure_pin+0x56>
   80668:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8066c:	d142      	bne.n	806f4 <pio_configure_pin+0xb0>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8066e:	f000 031f 	and.w	r3, r0, #31
   80672:	2001      	movs	r0, #1
   80674:	fa00 f303 	lsl.w	r3, r0, r3
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80678:	6463      	str	r3, [r4, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
		break;

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8067a:	6f22      	ldr	r2, [r4, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8067c:	431a      	orrs	r2, r3
   8067e:	6722      	str	r2, [r4, #112]	; 0x70
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80680:	07ea      	lsls	r2, r5, #31
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80682:	6063      	str	r3, [r4, #4]
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
   80684:	bf4c      	ite	mi
   80686:	6663      	strmi	r3, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80688:	6623      	strpl	r3, [r4, #96]	; 0x60
   8068a:	e034      	b.n	806f6 <pio_configure_pin+0xb2>
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8068c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80690:	d01c      	beq.n	806cc <pio_configure_pin+0x88>
   80692:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80696:	d019      	beq.n	806cc <pio_configure_pin+0x88>
   80698:	e02c      	b.n	806f4 <pio_configure_pin+0xb0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8069a:	f000 001f 	and.w	r0, r0, #31
   8069e:	2601      	movs	r6, #1
   806a0:	fa06 f700 	lsl.w	r7, r6, r0
   806a4:	4b15      	ldr	r3, [pc, #84]	; (806fc <pio_configure_pin+0xb8>)
   806a6:	4620      	mov	r0, r4
   806a8:	463a      	mov	r2, r7
   806aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806ac:	07e9      	lsls	r1, r5, #31
		p_pio->PIO_PUER = ul_mask;
   806ae:	bf4c      	ite	mi
   806b0:	6667      	strmi	r7, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806b2:	6627      	strpl	r7, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806b4:	4630      	mov	r0, r6
   806b6:	e01e      	b.n	806f6 <pio_configure_pin+0xb2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   806b8:	f000 011f 	and.w	r1, r0, #31
   806bc:	2601      	movs	r6, #1
   806be:	4620      	mov	r0, r4
   806c0:	fa06 f101 	lsl.w	r1, r6, r1
   806c4:	462a      	mov	r2, r5
   806c6:	4b0e      	ldr	r3, [pc, #56]	; (80700 <pio_configure_pin+0xbc>)
   806c8:	4798      	blx	r3
   806ca:	e7f3      	b.n	806b4 <pio_configure_pin+0x70>
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806cc:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   806ce:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   806d2:	ea05 0306 	and.w	r3, r5, r6
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806d6:	9300      	str	r3, [sp, #0]
   806d8:	f1b2 5360 	subs.w	r3, r2, #939524096	; 0x38000000
   806dc:	425a      	negs	r2, r3
   806de:	f000 011f 	and.w	r1, r0, #31
   806e2:	415a      	adcs	r2, r3
   806e4:	4620      	mov	r0, r4
   806e6:	fa06 f101 	lsl.w	r1, r6, r1
   806ea:	f3c5 0380 	ubfx	r3, r5, #2, #1
   806ee:	4c05      	ldr	r4, [pc, #20]	; (80704 <pio_configure_pin+0xc0>)
   806f0:	47a0      	blx	r4
   806f2:	e7df      	b.n	806b4 <pio_configure_pin+0x70>
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
   806f4:	2000      	movs	r0, #0
	}

	return 1;
}
   806f6:	b003      	add	sp, #12
   806f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806fa:	bf00      	nop
   806fc:	000805b1 	.word	0x000805b1
   80700:	000805ed 	.word	0x000805ed
   80704:	00080619 	.word	0x00080619

00080708 <pio_configure_pin_group>:
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80708:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8070c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80710:	b573      	push	{r0, r1, r4, r5, r6, lr}
   80712:	4605      	mov	r5, r0
   80714:	460c      	mov	r4, r1
   80716:	4616      	mov	r6, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80718:	d01c      	beq.n	80754 <pio_configure_pin_group+0x4c>
   8071a:	d80b      	bhi.n	80734 <pio_configure_pin_group+0x2c>
   8071c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80720:	d00f      	beq.n	80742 <pio_configure_pin_group+0x3a>
   80722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80726:	d129      	bne.n	8077c <pio_configure_pin_group+0x74>
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80728:	6469      	str	r1, [r5, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
		break;

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8072a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8072c:	430b      	orrs	r3, r1
   8072e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80730:	6069      	str	r1, [r5, #4]
   80732:	e00a      	b.n	8074a <pio_configure_pin_group+0x42>
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80734:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80738:	d010      	beq.n	8075c <pio_configure_pin_group+0x54>
   8073a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8073e:	d00d      	beq.n	8075c <pio_configure_pin_group+0x54>
   80740:	e01c      	b.n	8077c <pio_configure_pin_group+0x74>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80742:	4619      	mov	r1, r3
   80744:	4622      	mov	r2, r4
   80746:	4b0f      	ldr	r3, [pc, #60]	; (80784 <pio_configure_pin_group+0x7c>)
   80748:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8074a:	07f2      	lsls	r2, r6, #31
		p_pio->PIO_PUER = ul_mask;
   8074c:	bf4c      	ite	mi
   8074e:	666c      	strmi	r4, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80750:	662c      	strpl	r4, [r5, #96]	; 0x60
   80752:	e001      	b.n	80758 <pio_configure_pin_group+0x50>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80754:	4b0c      	ldr	r3, [pc, #48]	; (80788 <pio_configure_pin_group+0x80>)
   80756:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80758:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8075a:	e010      	b.n	8077e <pio_configure_pin_group+0x76>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8075c:	f006 5260 	and.w	r2, r6, #939524096	; 0x38000000
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   80760:	f006 0301 	and.w	r3, r6, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80764:	9300      	str	r3, [sp, #0]
   80766:	f1b2 5360 	subs.w	r3, r2, #939524096	; 0x38000000
   8076a:	425a      	negs	r2, r3
   8076c:	4621      	mov	r1, r4
   8076e:	415a      	adcs	r2, r3
   80770:	4628      	mov	r0, r5
   80772:	f3c6 0380 	ubfx	r3, r6, #2, #1
   80776:	4c05      	ldr	r4, [pc, #20]	; (8078c <pio_configure_pin_group+0x84>)
   80778:	47a0      	blx	r4
   8077a:	e7ed      	b.n	80758 <pio_configure_pin_group+0x50>
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
   8077c:	2000      	movs	r0, #0
	}

	return 1;
}
   8077e:	b002      	add	sp, #8
   80780:	bd70      	pop	{r4, r5, r6, pc}
   80782:	bf00      	nop
   80784:	000805b1 	.word	0x000805b1
   80788:	000805ed 	.word	0x000805ed
   8078c:	00080619 	.word	0x00080619

00080790 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80792:	4b11      	ldr	r3, [pc, #68]	; (807d8 <pio_handler_process+0x48>)
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80794:	4604      	mov	r4, r0
   80796:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80798:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   8079a:	4b10      	ldr	r3, [pc, #64]	; (807dc <pio_handler_process+0x4c>)
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8079c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8079e:	4620      	mov	r0, r4
   807a0:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   807a2:	4005      	ands	r5, r0
   807a4:	d016      	beq.n	807d4 <pio_handler_process+0x44>
   807a6:	4c0e      	ldr	r4, [pc, #56]	; (807e0 <pio_handler_process+0x50>)
   807a8:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   807ac:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   807b0:	42b3      	cmp	r3, r6
   807b2:	d10a      	bne.n	807ca <pio_handler_process+0x3a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   807b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   807b8:	4229      	tst	r1, r5
   807ba:	d006      	beq.n	807ca <pio_handler_process+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   807bc:	6823      	ldr	r3, [r4, #0]
   807be:	4630      	mov	r0, r6
   807c0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   807c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   807c6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   807ca:	42bc      	cmp	r4, r7
   807cc:	d002      	beq.n	807d4 <pio_handler_process+0x44>
   807ce:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   807d0:	2d00      	cmp	r5, #0
   807d2:	d1eb      	bne.n	807ac <pio_handler_process+0x1c>
   807d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807d6:	bf00      	nop
   807d8:	0008063d 	.word	0x0008063d
   807dc:	00080641 	.word	0x00080641
   807e0:	20070580 	.word	0x20070580

000807e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   807e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   807e6:	4802      	ldr	r0, [pc, #8]	; (807f0 <PIOA_Handler+0xc>)
   807e8:	210b      	movs	r1, #11
   807ea:	4b02      	ldr	r3, [pc, #8]	; (807f4 <PIOA_Handler+0x10>)
   807ec:	4798      	blx	r3
   807ee:	bd08      	pop	{r3, pc}
   807f0:	400e0e00 	.word	0x400e0e00
   807f4:	00080791 	.word	0x00080791

000807f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   807f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   807fa:	4802      	ldr	r0, [pc, #8]	; (80804 <PIOB_Handler+0xc>)
   807fc:	210c      	movs	r1, #12
   807fe:	4b02      	ldr	r3, [pc, #8]	; (80808 <PIOB_Handler+0x10>)
   80800:	4798      	blx	r3
   80802:	bd08      	pop	{r3, pc}
   80804:	400e1000 	.word	0x400e1000
   80808:	00080791 	.word	0x00080791

0008080c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8080c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8080e:	4802      	ldr	r0, [pc, #8]	; (80818 <PIOC_Handler+0xc>)
   80810:	210d      	movs	r1, #13
   80812:	4b02      	ldr	r3, [pc, #8]	; (8081c <PIOC_Handler+0x10>)
   80814:	4798      	blx	r3
   80816:	bd08      	pop	{r3, pc}
   80818:	400e1200 	.word	0x400e1200
   8081c:	00080791 	.word	0x00080791

00080820 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80820:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80822:	4802      	ldr	r0, [pc, #8]	; (8082c <PIOD_Handler+0xc>)
   80824:	210e      	movs	r1, #14
   80826:	4b02      	ldr	r3, [pc, #8]	; (80830 <PIOD_Handler+0x10>)
   80828:	4798      	blx	r3
   8082a:	bd08      	pop	{r3, pc}
   8082c:	400e1400 	.word	0x400e1400
   80830:	00080791 	.word	0x00080791

00080834 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80834:	4b0f      	ldr	r3, [pc, #60]	; (80874 <pmc_switch_mck_to_pllack+0x40>)
   80836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80838:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8083c:	4310      	orrs	r0, r2
   8083e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80840:	f640 0201 	movw	r2, #2049	; 0x801
   80844:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80846:	490b      	ldr	r1, [pc, #44]	; (80874 <pmc_switch_mck_to_pllack+0x40>)
   80848:	0700      	lsls	r0, r0, #28
   8084a:	d403      	bmi.n	80854 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8084c:	3a01      	subs	r2, #1
   8084e:	d1f9      	bne.n	80844 <pmc_switch_mck_to_pllack+0x10>
			return 1;
   80850:	2001      	movs	r0, #1
   80852:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80854:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80856:	f022 0203 	bic.w	r2, r2, #3
   8085a:	f042 0202 	orr.w	r2, r2, #2
   8085e:	630a      	str	r2, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80860:	f640 0201 	movw	r2, #2049	; 0x801
   80864:	6e99      	ldr	r1, [r3, #104]	; 0x68
   80866:	0709      	lsls	r1, r1, #28
   80868:	d402      	bmi.n	80870 <pmc_switch_mck_to_pllack+0x3c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8086a:	3a01      	subs	r2, #1
   8086c:	d1fa      	bne.n	80864 <pmc_switch_mck_to_pllack+0x30>
   8086e:	e7ef      	b.n	80850 <pmc_switch_mck_to_pllack+0x1c>
			return 1;
		}
	}

	return 0;
   80870:	2000      	movs	r0, #0
}
   80872:	4770      	bx	lr
   80874:	400e0600 	.word	0x400e0600

00080878 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   80878:	4b0f      	ldr	r3, [pc, #60]	; (808b8 <pmc_switch_mainck_to_xtal+0x40>)
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8087a:	6a1a      	ldr	r2, [r3, #32]
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8087c:	b128      	cbz	r0, 8088a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8087e:	490f      	ldr	r1, [pc, #60]	; (808bc <pmc_switch_mainck_to_xtal+0x44>)
   80880:	4011      	ands	r1, r2
   80882:	4a0f      	ldr	r2, [pc, #60]	; (808c0 <pmc_switch_mainck_to_xtal+0x48>)
   80884:	430a      	orrs	r2, r1
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80886:	621a      	str	r2, [r3, #32]
   80888:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8088a:	f422 125c 	bic.w	r2, r2, #3604480	; 0x370000
   8088e:	f022 0203 	bic.w	r2, r2, #3
   80892:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80896:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80898:	f042 0201 	orr.w	r2, r2, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8089c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8089e:	430a      	orrs	r2, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   808a0:	621a      	str	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   808a2:	6e99      	ldr	r1, [r3, #104]	; 0x68
   808a4:	4a04      	ldr	r2, [pc, #16]	; (808b8 <pmc_switch_mainck_to_xtal+0x40>)
   808a6:	07c9      	lsls	r1, r1, #31
   808a8:	d5fb      	bpl.n	808a2 <pmc_switch_mainck_to_xtal+0x2a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   808aa:	6a13      	ldr	r3, [r2, #32]
   808ac:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   808b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808b4:	6213      	str	r3, [r2, #32]
   808b6:	4770      	bx	lr
   808b8:	400e0600 	.word	0x400e0600
   808bc:	fec8fffc 	.word	0xfec8fffc
   808c0:	01370002 	.word	0x01370002

000808c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   808c4:	4b02      	ldr	r3, [pc, #8]	; (808d0 <pmc_osc_is_ready_mainck+0xc>)
   808c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   808cc:	4770      	bx	lr
   808ce:	bf00      	nop
   808d0:	400e0600 	.word	0x400e0600

000808d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   808d4:	4b02      	ldr	r3, [pc, #8]	; (808e0 <pmc_disable_pllack+0xc>)
   808d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   808da:	629a      	str	r2, [r3, #40]	; 0x28
   808dc:	4770      	bx	lr
   808de:	bf00      	nop
   808e0:	400e0600 	.word	0x400e0600

000808e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   808e4:	4b02      	ldr	r3, [pc, #8]	; (808f0 <pmc_is_locked_pllack+0xc>)
   808e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808e8:	f000 0002 	and.w	r0, r0, #2
   808ec:	4770      	bx	lr
   808ee:	bf00      	nop
   808f0:	400e0600 	.word	0x400e0600

000808f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   808f4:	282c      	cmp	r0, #44	; 0x2c
   808f6:	d819      	bhi.n	8092c <pmc_enable_periph_clk+0x38>
		return 1;
	}

	if (ul_id < 32) {
   808f8:	281f      	cmp	r0, #31
   808fa:	4b0e      	ldr	r3, [pc, #56]	; (80934 <pmc_enable_periph_clk+0x40>)
   808fc:	f04f 0201 	mov.w	r2, #1
   80900:	d808      	bhi.n	80914 <pmc_enable_periph_clk+0x20>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80902:	fa02 f000 	lsl.w	r0, r2, r0
   80906:	6999      	ldr	r1, [r3, #24]
   80908:	ea00 0201 	and.w	r2, r0, r1
   8090c:	4282      	cmp	r2, r0
   8090e:	d00f      	beq.n	80930 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   80910:	6118      	str	r0, [r3, #16]
   80912:	e00d      	b.n	80930 <pmc_enable_periph_clk+0x3c>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80914:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80916:	fa02 f000 	lsl.w	r0, r2, r0
   8091a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   8091e:	ea00 0201 	and.w	r2, r0, r1
   80922:	4282      	cmp	r2, r0
   80924:	d004      	beq.n	80930 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER1 = 1 << ul_id;
   80926:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   8092a:	e001      	b.n	80930 <pmc_enable_periph_clk+0x3c>
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8092c:	2001      	movs	r0, #1
   8092e:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80930:	2000      	movs	r0, #0
}
   80932:	4770      	bx	lr
   80934:	400e0600 	.word	0x400e0600

00080938 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80938:	e7fe      	b.n	80938 <Dummy_Handler>
	...

0008093c <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8093c:	4b16      	ldr	r3, [pc, #88]	; (80998 <Reset_Handler+0x5c>)
   8093e:	4a17      	ldr	r2, [pc, #92]	; (8099c <Reset_Handler+0x60>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80940:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80942:	4293      	cmp	r3, r2
   80944:	461c      	mov	r4, r3
   80946:	d001      	beq.n	8094c <Reset_Handler+0x10>
   80948:	2300      	movs	r3, #0
   8094a:	e001      	b.n	80950 <Reset_Handler+0x14>
   8094c:	4b14      	ldr	r3, [pc, #80]	; (809a0 <Reset_Handler+0x64>)
   8094e:	e007      	b.n	80960 <Reset_Handler+0x24>
		for (; pDest < &_erelocate;) {
   80950:	4914      	ldr	r1, [pc, #80]	; (809a4 <Reset_Handler+0x68>)
   80952:	18d0      	adds	r0, r2, r3
   80954:	4288      	cmp	r0, r1
   80956:	d2f9      	bcs.n	8094c <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
   80958:	58e1      	ldr	r1, [r4, r3]
   8095a:	50d1      	str	r1, [r2, r3]
   8095c:	3304      	adds	r3, #4
   8095e:	e7f7      	b.n	80950 <Reset_Handler+0x14>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80960:	4a11      	ldr	r2, [pc, #68]	; (809a8 <Reset_Handler+0x6c>)
   80962:	4293      	cmp	r3, r2
   80964:	d203      	bcs.n	8096e <Reset_Handler+0x32>
		*pDest++ = 0;
   80966:	2200      	movs	r2, #0
   80968:	f843 2b04 	str.w	r2, [r3], #4
   8096c:	e7f8      	b.n	80960 <Reset_Handler+0x24>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8096e:	490f      	ldr	r1, [pc, #60]	; (809ac <Reset_Handler+0x70>)
   80970:	4b0f      	ldr	r3, [pc, #60]	; (809b0 <Reset_Handler+0x74>)
   80972:	f021 4260 	bic.w	r2, r1, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80976:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8097a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8097e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80982:	609a      	str	r2, [r3, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80984:	d203      	bcs.n	8098e <Reset_Handler+0x52>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80986:	689a      	ldr	r2, [r3, #8]
   80988:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8098c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8098e:	4b09      	ldr	r3, [pc, #36]	; (809b4 <Reset_Handler+0x78>)
   80990:	4798      	blx	r3

	/* Branch to main function */
	main();
   80992:	4b09      	ldr	r3, [pc, #36]	; (809b8 <Reset_Handler+0x7c>)
   80994:	4798      	blx	r3
   80996:	e7fe      	b.n	80996 <Reset_Handler+0x5a>
   80998:	00080cd4 	.word	0x00080cd4
   8099c:	20070000 	.word	0x20070000
   809a0:	20070558 	.word	0x20070558
   809a4:	20070558 	.word	0x20070558
   809a8:	200705ec 	.word	0x200705ec
   809ac:	00080000 	.word	0x00080000
   809b0:	e000ed00 	.word	0xe000ed00
   809b4:	00080b61 	.word	0x00080b61
   809b8:	00080ae1 	.word	0x00080ae1

000809bc <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   809bc:	b510      	push	{r4, lr}
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809be:	4a2c      	ldr	r2, [pc, #176]	; (80a70 <SystemCoreClockUpdate+0xb4>)
   809c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   809c2:	f003 0303 	and.w	r3, r3, #3
   809c6:	2b01      	cmp	r3, #1
   809c8:	4b2a      	ldr	r3, [pc, #168]	; (80a74 <SystemCoreClockUpdate+0xb8>)
   809ca:	d00d      	beq.n	809e8 <SystemCoreClockUpdate+0x2c>
   809cc:	d303      	bcc.n	809d6 <SystemCoreClockUpdate+0x1a>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809ce:	6a11      	ldr	r1, [r2, #32]
   809d0:	01cc      	lsls	r4, r1, #7
   809d2:	d51a      	bpl.n	80a0a <SystemCoreClockUpdate+0x4e>
   809d4:	e025      	b.n	80a22 <SystemCoreClockUpdate+0x66>
void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   809d6:	4928      	ldr	r1, [pc, #160]	; (80a78 <SystemCoreClockUpdate+0xbc>)
   809d8:	6949      	ldr	r1, [r1, #20]
   809da:	0608      	lsls	r0, r1, #24
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   809dc:	bf4c      	ite	mi
   809de:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   809e2:	f44f 41fa 	movpl.w	r1, #32000	; 0x7d00
   809e6:	e030      	b.n	80a4a <SystemCoreClockUpdate+0x8e>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809e8:	6a11      	ldr	r1, [r2, #32]
   809ea:	01c9      	lsls	r1, r1, #7
   809ec:	d40b      	bmi.n	80a06 <SystemCoreClockUpdate+0x4a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809ee:	4923      	ldr	r1, [pc, #140]	; (80a7c <SystemCoreClockUpdate+0xc0>)
   809f0:	6019      	str	r1, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   809f2:	6a11      	ldr	r1, [r2, #32]
   809f4:	f001 0170 	and.w	r1, r1, #112	; 0x70
   809f8:	2910      	cmp	r1, #16
   809fa:	d002      	beq.n	80a02 <SystemCoreClockUpdate+0x46>
   809fc:	2920      	cmp	r1, #32
   809fe:	d002      	beq.n	80a06 <SystemCoreClockUpdate+0x4a>
   80a00:	e024      	b.n	80a4c <SystemCoreClockUpdate+0x90>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a02:	491f      	ldr	r1, [pc, #124]	; (80a80 <SystemCoreClockUpdate+0xc4>)
   80a04:	e021      	b.n	80a4a <SystemCoreClockUpdate+0x8e>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a06:	491f      	ldr	r1, [pc, #124]	; (80a84 <SystemCoreClockUpdate+0xc8>)
   80a08:	e01f      	b.n	80a4a <SystemCoreClockUpdate+0x8e>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a0a:	491c      	ldr	r1, [pc, #112]	; (80a7c <SystemCoreClockUpdate+0xc0>)
   80a0c:	6019      	str	r1, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a0e:	6a11      	ldr	r1, [r2, #32]
   80a10:	f001 0170 	and.w	r1, r1, #112	; 0x70
   80a14:	2910      	cmp	r1, #16
   80a16:	d002      	beq.n	80a1e <SystemCoreClockUpdate+0x62>
   80a18:	2920      	cmp	r1, #32
   80a1a:	d002      	beq.n	80a22 <SystemCoreClockUpdate+0x66>
   80a1c:	e003      	b.n	80a26 <SystemCoreClockUpdate+0x6a>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a1e:	4918      	ldr	r1, [pc, #96]	; (80a80 <SystemCoreClockUpdate+0xc4>)
   80a20:	e000      	b.n	80a24 <SystemCoreClockUpdate+0x68>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a22:	4918      	ldr	r1, [pc, #96]	; (80a84 <SystemCoreClockUpdate+0xc8>)
   80a24:	6019      	str	r1, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a26:	6b11      	ldr	r1, [r2, #48]	; 0x30
   80a28:	4811      	ldr	r0, [pc, #68]	; (80a70 <SystemCoreClockUpdate+0xb4>)
   80a2a:	f001 0103 	and.w	r1, r1, #3
   80a2e:	2902      	cmp	r1, #2
   80a30:	d10a      	bne.n	80a48 <SystemCoreClockUpdate+0x8c>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a32:	6a84      	ldr	r4, [r0, #40]	; 0x28
   80a34:	6819      	ldr	r1, [r3, #0]
   80a36:	f3c4 440a 	ubfx	r4, r4, #16, #11
   80a3a:	fb04 1101 	mla	r1, r4, r1, r1
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   80a40:	b2c0      	uxtb	r0, r0
   80a42:	fbb1 f1f0 	udiv	r1, r1, r0
   80a46:	e000      	b.n	80a4a <SystemCoreClockUpdate+0x8e>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a48:	490f      	ldr	r1, [pc, #60]	; (80a88 <SystemCoreClockUpdate+0xcc>)
   80a4a:	6019      	str	r1, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a4e:	f002 0270 	and.w	r2, r2, #112	; 0x70
   80a52:	2a70      	cmp	r2, #112	; 0x70
   80a54:	d104      	bne.n	80a60 <SystemCoreClockUpdate+0xa4>
		SystemCoreClock /= 3U;
   80a56:	681a      	ldr	r2, [r3, #0]
   80a58:	2103      	movs	r1, #3
   80a5a:	fbb2 f2f1 	udiv	r2, r2, r1
   80a5e:	e005      	b.n	80a6c <SystemCoreClockUpdate+0xb0>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a60:	4a03      	ldr	r2, [pc, #12]	; (80a70 <SystemCoreClockUpdate+0xb4>)
   80a62:	6b11      	ldr	r1, [r2, #48]	; 0x30
   80a64:	681a      	ldr	r2, [r3, #0]
   80a66:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80a6a:	40ca      	lsrs	r2, r1
   80a6c:	601a      	str	r2, [r3, #0]
   80a6e:	bd10      	pop	{r4, pc}
   80a70:	400e0600 	.word	0x400e0600
   80a74:	2007012c 	.word	0x2007012c
   80a78:	400e1a10 	.word	0x400e1a10
   80a7c:	003d0900 	.word	0x003d0900
   80a80:	007a1200 	.word	0x007a1200
   80a84:	00b71b00 	.word	0x00b71b00
   80a88:	0e4e1c00 	.word	0x0e4e1c00

00080a8c <pinMode>:
void pinMode(int pinNumber, mode_definition mode)
{
	uint32_t *const p_PIOB_OER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);	/* defines the address for enabling the parallel output B register */
	uint32_t *const p_PIOB_PER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0000U);	/* defines the address for enabling the parallel Input/output B register */
	
	if(pinNumber == 13) {
   80a8c:	280d      	cmp	r0, #13
		pinNumber = 27;
   80a8e:	bf14      	ite	ne
   80a90:	231a      	movne	r3, #26
   80a92:	231b      	moveq	r3, #27
	}else {
		pinNumber = 26;
	}

	if (mode == OUTPUT)	/* You only have to program a function that cares about OUTPUT, and does nothing for the other values */
   80a94:	2902      	cmp	r1, #2
   80a96:	d108      	bne.n	80aaa <pinMode+0x1e>
	{
		*p_PIOB_PER |= (1<<(pinNumber));
   80a98:	2201      	movs	r2, #1
   80a9a:	409a      	lsls	r2, r3
   80a9c:	4b03      	ldr	r3, [pc, #12]	; (80aac <pinMode+0x20>)
   80a9e:	6819      	ldr	r1, [r3, #0]
   80aa0:	4311      	orrs	r1, r2
   80aa2:	6019      	str	r1, [r3, #0]
		*p_PIOB_OER |= (1<<(pinNumber));
   80aa4:	6919      	ldr	r1, [r3, #16]
   80aa6:	430a      	orrs	r2, r1
   80aa8:	611a      	str	r2, [r3, #16]
   80aaa:	4770      	bx	lr
   80aac:	400e1000 	.word	0x400e1000

00080ab0 <digitalWrite>:
void digitalWrite(int pinNumber, int value)
{
	uint32_t *const p_PIOB_SODR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0030U);	/* defines the address for setting the output pins of the B register */
	uint32_t *const p_PIOB_CODR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0034U);	/* defines the address for setting the output pins of the B register */
	
	if(pinNumber == 13) {
   80ab0:	280d      	cmp	r0, #13
		pinNumber = 27;
   80ab2:	bf14      	ite	ne
   80ab4:	221a      	movne	r2, #26
   80ab6:	221b      	moveq	r2, #27
	else {
		pinNumber = 26;
	}
	
	
	if (value == HIGH)
   80ab8:	2901      	cmp	r1, #1
   80aba:	d104      	bne.n	80ac6 <digitalWrite+0x16>
	{
		*p_PIOB_SODR |= (1<<(pinNumber));
   80abc:	4091      	lsls	r1, r2
   80abe:	4b06      	ldr	r3, [pc, #24]	; (80ad8 <digitalWrite+0x28>)
   80ac0:	6818      	ldr	r0, [r3, #0]
   80ac2:	4308      	orrs	r0, r1
   80ac4:	e006      	b.n	80ad4 <digitalWrite+0x24>
	}
	else if (value == LOW)
   80ac6:	b931      	cbnz	r1, 80ad6 <digitalWrite+0x26>
	{
		*p_PIOB_CODR |= (1<<(pinNumber));
   80ac8:	2001      	movs	r0, #1
   80aca:	fa00 f202 	lsl.w	r2, r0, r2
   80ace:	4b03      	ldr	r3, [pc, #12]	; (80adc <digitalWrite+0x2c>)
   80ad0:	6818      	ldr	r0, [r3, #0]
   80ad2:	4310      	orrs	r0, r2
   80ad4:	6018      	str	r0, [r3, #0]
   80ad6:	4770      	bx	lr
   80ad8:	400e1030 	.word	0x400e1030
   80adc:	400e1034 	.word	0x400e1034

00080ae0 <main>:

#define CONF_BOARD_KEEP_WATCHDOG_AT_INIT 1
#define PIOB_BASE_ADDRESS 0x400E1000U

int main (void)
{
   80ae0:	b538      	push	{r3, r4, r5, lr}
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
   80ae2:	4b14      	ldr	r3, [pc, #80]	; (80b34 <main+0x54>)
   80ae4:	4798      	blx	r3
	board_init();
   80ae6:	4b14      	ldr	r3, [pc, #80]	; (80b38 <main+0x58>)
   80ae8:	4798      	blx	r3
	delayInit();
   80aea:	4b14      	ldr	r3, [pc, #80]	; (80b3c <main+0x5c>)
   80aec:	4798      	blx	r3
	/* Set pins to OUTPUT */
	pinMode(13, OUTPUT);
   80aee:	4c14      	ldr	r4, [pc, #80]	; (80b40 <main+0x60>)
   80af0:	200d      	movs	r0, #13
   80af2:	2102      	movs	r1, #2
   80af4:	47a0      	blx	r4
	pinMode(22, OUTPUT);
   80af6:	2102      	movs	r1, #2
   80af8:	2016      	movs	r0, #22
   80afa:	47a0      	blx	r4
	
	/* Calulcate Frequency */
	uint32_t freq = (960721 % 1999) + 991;
	
	/* Configure and start TC0, Channel 0 */
	configure_tc0(freq * 16);
   80afc:	4b11      	ldr	r3, [pc, #68]	; (80b44 <main+0x64>)
   80afe:	f44f 4009 	mov.w	r0, #35072	; 0x8900
   80b02:	4798      	blx	r3
	delayMicroseconds(3600); // Delay to synchronize calculation of noise and DAC output 
   80b04:	4c10      	ldr	r4, [pc, #64]	; (80b48 <main+0x68>)
   80b06:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   80b0a:	47a0      	blx	r4
	/* Configure and start TC1, Channel 1 */
	configure_tc4(freq * 16);
   80b0c:	4b0f      	ldr	r3, [pc, #60]	; (80b4c <main+0x6c>)
   80b0e:	f44f 4009 	mov.w	r0, #35072	; 0x8900
   80b12:	4798      	blx	r3
	
	/* Configure DA */
	configure_da();
   80b14:	4b0e      	ldr	r3, [pc, #56]	; (80b50 <main+0x70>)
   80b16:	4798      	blx	r3
	
	/* Runs forever, blink LED every 1,5s and reset watchdogtimer */ 
	while(1) {
		watchDogReload();
   80b18:	4b0e      	ldr	r3, [pc, #56]	; (80b54 <main+0x74>)
   80b1a:	4798      	blx	r3
		digitalWrite(13, 1);
   80b1c:	4d0e      	ldr	r5, [pc, #56]	; (80b58 <main+0x78>)
   80b1e:	2101      	movs	r1, #1
   80b20:	200d      	movs	r0, #13
   80b22:	47a8      	blx	r5
		delayMicroseconds(750000);
   80b24:	480d      	ldr	r0, [pc, #52]	; (80b5c <main+0x7c>)
   80b26:	47a0      	blx	r4
		digitalWrite(13, 0);
   80b28:	200d      	movs	r0, #13
   80b2a:	2100      	movs	r1, #0
   80b2c:	47a8      	blx	r5
		delayMicroseconds(750000);
   80b2e:	480b      	ldr	r0, [pc, #44]	; (80b5c <main+0x7c>)
   80b30:	47a0      	blx	r4
   80b32:	e7f1      	b.n	80b18 <main+0x38>
   80b34:	000804cd 	.word	0x000804cd
   80b38:	00080531 	.word	0x00080531
   80b3c:	00080459 	.word	0x00080459
   80b40:	00080a8d 	.word	0x00080a8d
   80b44:	0008035d 	.word	0x0008035d
   80b48:	00080495 	.word	0x00080495
   80b4c:	000802d1 	.word	0x000802d1
   80b50:	00080269 	.word	0x00080269
   80b54:	000801b9 	.word	0x000801b9
   80b58:	00080ab1 	.word	0x00080ab1
   80b5c:	000b71b0 	.word	0x000b71b0

00080b60 <__libc_init_array>:
   80b60:	b570      	push	{r4, r5, r6, lr}
   80b62:	4e0f      	ldr	r6, [pc, #60]	; (80ba0 <__libc_init_array+0x40>)
   80b64:	4d0f      	ldr	r5, [pc, #60]	; (80ba4 <__libc_init_array+0x44>)
   80b66:	1b76      	subs	r6, r6, r5
   80b68:	10b6      	asrs	r6, r6, #2
   80b6a:	d007      	beq.n	80b7c <__libc_init_array+0x1c>
   80b6c:	3d04      	subs	r5, #4
   80b6e:	2400      	movs	r4, #0
   80b70:	3401      	adds	r4, #1
   80b72:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80b76:	4798      	blx	r3
   80b78:	42a6      	cmp	r6, r4
   80b7a:	d1f9      	bne.n	80b70 <__libc_init_array+0x10>
   80b7c:	4e0a      	ldr	r6, [pc, #40]	; (80ba8 <__libc_init_array+0x48>)
   80b7e:	4d0b      	ldr	r5, [pc, #44]	; (80bac <__libc_init_array+0x4c>)
   80b80:	f000 f896 	bl	80cb0 <_init>
   80b84:	1b76      	subs	r6, r6, r5
   80b86:	10b6      	asrs	r6, r6, #2
   80b88:	d008      	beq.n	80b9c <__libc_init_array+0x3c>
   80b8a:	3d04      	subs	r5, #4
   80b8c:	2400      	movs	r4, #0
   80b8e:	3401      	adds	r4, #1
   80b90:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80b94:	4798      	blx	r3
   80b96:	42a6      	cmp	r6, r4
   80b98:	d1f9      	bne.n	80b8e <__libc_init_array+0x2e>
   80b9a:	bd70      	pop	{r4, r5, r6, pc}
   80b9c:	bd70      	pop	{r4, r5, r6, pc}
   80b9e:	bf00      	nop
   80ba0:	00080cbc 	.word	0x00080cbc
   80ba4:	00080cbc 	.word	0x00080cbc
   80ba8:	00080cc4 	.word	0x00080cc4
   80bac:	00080cbc 	.word	0x00080cbc

00080bb0 <register_fini>:
   80bb0:	4b02      	ldr	r3, [pc, #8]	; (80bbc <register_fini+0xc>)
   80bb2:	b113      	cbz	r3, 80bba <register_fini+0xa>
   80bb4:	4802      	ldr	r0, [pc, #8]	; (80bc0 <register_fini+0x10>)
   80bb6:	f000 b805 	b.w	80bc4 <atexit>
   80bba:	4770      	bx	lr
   80bbc:	00000000 	.word	0x00000000
   80bc0:	00080bd1 	.word	0x00080bd1

00080bc4 <atexit>:
   80bc4:	4601      	mov	r1, r0
   80bc6:	2000      	movs	r0, #0
   80bc8:	4602      	mov	r2, r0
   80bca:	4603      	mov	r3, r0
   80bcc:	f000 b818 	b.w	80c00 <__register_exitproc>

00080bd0 <__libc_fini_array>:
   80bd0:	b538      	push	{r3, r4, r5, lr}
   80bd2:	4d09      	ldr	r5, [pc, #36]	; (80bf8 <__libc_fini_array+0x28>)
   80bd4:	4c09      	ldr	r4, [pc, #36]	; (80bfc <__libc_fini_array+0x2c>)
   80bd6:	1b64      	subs	r4, r4, r5
   80bd8:	10a4      	asrs	r4, r4, #2
   80bda:	bf18      	it	ne
   80bdc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80be0:	d005      	beq.n	80bee <__libc_fini_array+0x1e>
   80be2:	3c01      	subs	r4, #1
   80be4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80be8:	4798      	blx	r3
   80bea:	2c00      	cmp	r4, #0
   80bec:	d1f9      	bne.n	80be2 <__libc_fini_array+0x12>
   80bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80bf2:	f000 b867 	b.w	80cc4 <_fini>
   80bf6:	bf00      	nop
   80bf8:	00080cd0 	.word	0x00080cd0
   80bfc:	00080cd4 	.word	0x00080cd4

00080c00 <__register_exitproc>:
   80c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c02:	4c27      	ldr	r4, [pc, #156]	; (80ca0 <__register_exitproc+0xa0>)
   80c04:	b085      	sub	sp, #20
   80c06:	6826      	ldr	r6, [r4, #0]
   80c08:	4607      	mov	r7, r0
   80c0a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   80c0e:	2c00      	cmp	r4, #0
   80c10:	d040      	beq.n	80c94 <__register_exitproc+0x94>
   80c12:	6865      	ldr	r5, [r4, #4]
   80c14:	2d1f      	cmp	r5, #31
   80c16:	dd1e      	ble.n	80c56 <__register_exitproc+0x56>
   80c18:	4822      	ldr	r0, [pc, #136]	; (80ca4 <__register_exitproc+0xa4>)
   80c1a:	b918      	cbnz	r0, 80c24 <__register_exitproc+0x24>
   80c1c:	f04f 30ff 	mov.w	r0, #4294967295
   80c20:	b005      	add	sp, #20
   80c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c24:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80c28:	9103      	str	r1, [sp, #12]
   80c2a:	9202      	str	r2, [sp, #8]
   80c2c:	9301      	str	r3, [sp, #4]
   80c2e:	f3af 8000 	nop.w
   80c32:	9903      	ldr	r1, [sp, #12]
   80c34:	4604      	mov	r4, r0
   80c36:	9a02      	ldr	r2, [sp, #8]
   80c38:	9b01      	ldr	r3, [sp, #4]
   80c3a:	2800      	cmp	r0, #0
   80c3c:	d0ee      	beq.n	80c1c <__register_exitproc+0x1c>
   80c3e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   80c42:	2000      	movs	r0, #0
   80c44:	6025      	str	r5, [r4, #0]
   80c46:	6060      	str	r0, [r4, #4]
   80c48:	4605      	mov	r5, r0
   80c4a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80c4e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   80c52:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80c56:	b93f      	cbnz	r7, 80c68 <__register_exitproc+0x68>
   80c58:	1c6b      	adds	r3, r5, #1
   80c5a:	2000      	movs	r0, #0
   80c5c:	3502      	adds	r5, #2
   80c5e:	6063      	str	r3, [r4, #4]
   80c60:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80c64:	b005      	add	sp, #20
   80c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c68:	2601      	movs	r6, #1
   80c6a:	40ae      	lsls	r6, r5
   80c6c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   80c70:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   80c74:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   80c78:	2f02      	cmp	r7, #2
   80c7a:	ea42 0206 	orr.w	r2, r2, r6
   80c7e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   80c82:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   80c86:	d1e7      	bne.n	80c58 <__register_exitproc+0x58>
   80c88:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80c8c:	431e      	orrs	r6, r3
   80c8e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   80c92:	e7e1      	b.n	80c58 <__register_exitproc+0x58>
   80c94:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   80c98:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80c9c:	e7b9      	b.n	80c12 <__register_exitproc+0x12>
   80c9e:	bf00      	nop
   80ca0:	00080cac 	.word	0x00080cac
   80ca4:	00000000 	.word	0x00000000
   80ca8:	00000043 	.word	0x00000043

00080cac <_global_impure_ptr>:
   80cac:	20070130                                0.. 

00080cb0 <_init>:
   80cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cb2:	bf00      	nop
   80cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80cb6:	bc08      	pop	{r3}
   80cb8:	469e      	mov	lr, r3
   80cba:	4770      	bx	lr

00080cbc <__init_array_start>:
   80cbc:	00080bb1 	.word	0x00080bb1

00080cc0 <__frame_dummy_init_array_entry>:
   80cc0:	00080119                                ....

00080cc4 <_fini>:
   80cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cc6:	bf00      	nop
   80cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80cca:	bc08      	pop	{r3}
   80ccc:	469e      	mov	lr, r3
   80cce:	4770      	bx	lr

00080cd0 <__fini_array_start>:
   80cd0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	4a1a      	ldr	r2, [pc, #104]	; (2007006c <SystemInit+0x6c>)
20070002:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000c:	4b18      	ldr	r3, [pc, #96]	; (20070070 <SystemInit+0x70>)
2007000e:	6a1a      	ldr	r2, [r3, #32]
20070010:	01d2      	lsls	r2, r2, #7
20070012:	d502      	bpl.n	2007001a <SystemInit+0x1a>
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070014:	4a17      	ldr	r2, [pc, #92]	; (20070074 <SystemInit+0x74>)
20070016:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20070018:	e005      	b.n	20070026 <SystemInit+0x26>
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2007001a:	4a17      	ldr	r2, [pc, #92]	; (20070078 <SystemInit+0x78>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
20070020:	07d0      	lsls	r0, r2, #31
20070022:	d5fc      	bpl.n	2007001e <SystemInit+0x1e>
20070024:	e7f6      	b.n	20070014 <SystemInit+0x14>

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20070026:	6e99      	ldr	r1, [r3, #104]	; 0x68
20070028:	4a11      	ldr	r2, [pc, #68]	; (20070070 <SystemInit+0x70>)
2007002a:	03c9      	lsls	r1, r1, #15
2007002c:	d5fb      	bpl.n	20070026 <SystemInit+0x26>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002e:	6b11      	ldr	r1, [r2, #48]	; 0x30
20070030:	f021 0103 	bic.w	r1, r1, #3
20070034:	f041 0101 	orr.w	r1, r1, #1
20070038:	6311      	str	r1, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007003a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2007003c:	0712      	lsls	r2, r2, #28
2007003e:	d5fc      	bpl.n	2007003a <SystemInit+0x3a>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070040:	490e      	ldr	r1, [pc, #56]	; (2007007c <SystemInit+0x7c>)
20070042:	4a0b      	ldr	r2, [pc, #44]	; (20070070 <SystemInit+0x70>)
20070044:	6291      	str	r1, [r2, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070046:	6e9a      	ldr	r2, [r3, #104]	; 0x68
20070048:	0790      	lsls	r0, r2, #30
2007004a:	d5fc      	bpl.n	20070046 <SystemInit+0x46>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004c:	4a08      	ldr	r2, [pc, #32]	; (20070070 <SystemInit+0x70>)
2007004e:	2111      	movs	r1, #17
20070050:	6311      	str	r1, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e9a      	ldr	r2, [r3, #104]	; 0x68
20070054:	0711      	lsls	r1, r2, #28
20070056:	d5fc      	bpl.n	20070052 <SystemInit+0x52>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070058:	4a05      	ldr	r2, [pc, #20]	; (20070070 <SystemInit+0x70>)
2007005a:	2112      	movs	r1, #18
2007005c:	6311      	str	r1, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007005e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
20070060:	0712      	lsls	r2, r2, #28
20070062:	d5fc      	bpl.n	2007005e <SystemInit+0x5e>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070064:	4a06      	ldr	r2, [pc, #24]	; (20070080 <SystemInit+0x80>)
20070066:	4b07      	ldr	r3, [pc, #28]	; (20070084 <SystemInit+0x84>)
20070068:	601a      	str	r2, [r3, #0]
2007006a:	4770      	bx	lr
2007006c:	400e0a00 	.word	0x400e0a00
20070070:	400e0600 	.word	0x400e0600
20070074:	01370809 	.word	0x01370809
20070078:	00370809 	.word	0x00370809
2007007c:	200d3f01 	.word	0x200d3f01
20070080:	0501bd00 	.word	0x0501bd00
20070084:	2007012c 	.word	0x2007012c

20070088 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20070088:	4b11      	ldr	r3, [pc, #68]	; (200700d0 <system_init_flash+0x48>)
2007008a:	4a12      	ldr	r2, [pc, #72]	; (200700d4 <system_init_flash+0x4c>)
2007008c:	4298      	cmp	r0, r3
2007008e:	4b12      	ldr	r3, [pc, #72]	; (200700d8 <system_init_flash+0x50>)
20070090:	d801      	bhi.n	20070096 <system_init_flash+0xe>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070092:	2100      	movs	r1, #0
20070094:	e018      	b.n	200700c8 <system_init_flash+0x40>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20070096:	4911      	ldr	r1, [pc, #68]	; (200700dc <system_init_flash+0x54>)
20070098:	4288      	cmp	r0, r1
2007009a:	d802      	bhi.n	200700a2 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
2007009c:	f44f 7180 	mov.w	r1, #256	; 0x100
200700a0:	e012      	b.n	200700c8 <system_init_flash+0x40>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700a2:	490f      	ldr	r1, [pc, #60]	; (200700e0 <system_init_flash+0x58>)
200700a4:	4288      	cmp	r0, r1
200700a6:	d802      	bhi.n	200700ae <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700a8:	f44f 7100 	mov.w	r1, #512	; 0x200
200700ac:	e00c      	b.n	200700c8 <system_init_flash+0x40>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700ae:	490d      	ldr	r1, [pc, #52]	; (200700e4 <system_init_flash+0x5c>)
200700b0:	4288      	cmp	r0, r1
200700b2:	d802      	bhi.n	200700ba <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700b4:	f44f 7140 	mov.w	r1, #768	; 0x300
200700b8:	e006      	b.n	200700c8 <system_init_flash+0x40>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700ba:	490b      	ldr	r1, [pc, #44]	; (200700e8 <system_init_flash+0x60>)
200700bc:	4288      	cmp	r0, r1
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700be:	bf94      	ite	ls
200700c0:	f44f 6180 	movls.w	r1, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c4:	f44f 61a0 	movhi.w	r1, #1280	; 0x500
200700c8:	6011      	str	r1, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ca:	6019      	str	r1, [r3, #0]
200700cc:	4770      	bx	lr
200700ce:	bf00      	nop
200700d0:	0121eabf 	.word	0x0121eabf
200700d4:	400e0a00 	.word	0x400e0a00
200700d8:	400e0c00 	.word	0x400e0c00
200700dc:	02faf07f 	.word	0x02faf07f
200700e0:	03d08fff 	.word	0x03d08fff
200700e4:	04c4b3ff 	.word	0x04c4b3ff
200700e8:	055d4a7f 	.word	0x055d4a7f

200700ec <sine>:
200700ec:	000006e8 0000084d 0000097a 00000a44     ....M...z...D...
200700fc:	00000a8b 00000a44 0000097a 0000084d     ....D...z...M...
2007010c:	000006e8 00000584 00000456 0000038c     ........V.......
2007011c:	00000346 0000038c 00000456 00000584     F.......V.......

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00080ca8 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
